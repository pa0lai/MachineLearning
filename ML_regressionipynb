{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPpHkL11DdjBcKEp5XeN60m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pa0lai/MachineLearning/blob/main/ML_regressionipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "environment settings"
      ],
      "metadata": {
        "id": "IKn9sUfM0Ei1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from sklearn.impute import SimpleImputer\n"
      ],
      "metadata": {
        "id": "l44Nrn0m0Dua"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.\n"
      ],
      "metadata": {
        "id": "BtZFDiQmy7Yk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 93
        },
        "id": "3bweEZdF7fpI",
        "outputId": "58e7d60e-1111-4cf6-f52b-9df91bb8c99b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-15999de8-c771-49b4-8c4b-1cc83b21d20d\" name=\"files[]\"  disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-15999de8-c771-49b4-8c4b-1cc83b21d20d\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved Life Expectancy Data.csv to /content/abc.csv\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "381.6497866876415"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "\n",
        "# step1: 讀取 & 整理資料(選取GDP和percentage expenditure)\n",
        "from google.colab import files\n",
        "files.upload_file('abc.csv')\n",
        "data = pd.read_csv('abc.csv')\n",
        "\n",
        "#Normalization\n",
        "x = data.GDP.values.reshape(-1,1)\n",
        "y = data['percentage expenditure'].values.reshape(-1,1)\n",
        "\n",
        "#處理NaN\n",
        "imputer = SimpleImputer(missing_values=np.nan, strategy=\"median\")\n",
        "imputer = imputer.fit(x)\n",
        "x = imputer.transform(x)\n",
        "\n",
        "# step2: 切分 train、test 資料\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.33, random_state= 101)\n",
        "\n",
        "# step3: 建立 regression\n",
        "lr = LinearRegression()\n",
        "\n",
        "# step4: 訓練回歸模型\n",
        "lr.fit(x_train, y_train)\n",
        "\n",
        "# step5: 預測測試集資料\n",
        "lr.predict(x_test)\n",
        "pred = lr.predict(x_test)\n",
        "\n",
        "# step6:  計算評估指標\n",
        "mean_absolute_error(y_test, pred)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "使用mean_absolute_error原因:離群值多"
      ],
      "metadata": {
        "id": "17rP8fCUvhGy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.\n"
      ],
      "metadata": {
        "id": "7YFzHQrTy9qa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Polynomial Regression"
      ],
      "metadata": {
        "id": "6nNtIP6zzb-z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "\n",
        "polydata = data.copy()"
      ],
      "metadata": {
        "id": "F7tBcxvpzQJG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "polynomial_regression = PolynomialFeatures(degree = 15)   #15次\n",
        "x_polynomial = polynomial_regression.fit_transform(x)  #將原始特征 x 轉換為多項式特征\n",
        "\n",
        "linear_reg2 = LinearRegression()  #線性回歸\n",
        "linear_reg2.fit(x_polynomial,y)\n",
        "\n",
        "y_head = linear_reg2.predict(x_polynomial)  #預測\n",
        "\n",
        "plt.plot(x,y_head,color=\"green\",label=\"poly\")  #畫圖\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "durka7s6zoTy",
        "outputId": "a21751d3-6c70-41b5-ea2e-4e1392728214"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision Tree Regression"
      ],
      "metadata": {
        "id": "Zxq-pWa71pSq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "DTdata = data.copy()"
      ],
      "metadata": {
        "id": "bjKYo5tY1ro4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DT_reg = DecisionTreeRegressor()     #創建決策樹回歸模型\n",
        "DT_reg.fit(x_train,y_train)\n",
        "\n",
        "print(DT_reg.predict([[1000]]))  #預測 x 值為 1000 時的目標變數值(其實看不太懂)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "48FaN7KZ1ywz",
        "outputId": "a3aa235e-b509-4c85-a57a-318f01013508"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[98.68367951]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_array = np.arange(min(x),max(x),0.01).reshape(-1,1)\n",
        "y_head = DT_reg.predict(x_array)\n",
        "\n",
        "plt.scatter(x,y, color=\"red\")\n",
        "plt.plot(x_array,y_head,color=\"blue\")\n",
        "plt.xlabel(\"GDP\")\n",
        "plt.ylabel(\"percentage expenditure\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "CFlOdHTC2z1o",
        "outputId": "eb05b88d-85cb-4991-ed81-06a103c16db2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest Regression"
      ],
      "metadata": {
        "id": "WADwzWWSH55e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "RFdata = data.copy()\n",
        "\n"
      ],
      "metadata": {
        "id": "9roNw4RhH6iR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "RF_reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "RF_reg.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "id": "IEcghVNzIQcA",
        "outputId": "78bb73e6-7751-4dcd-a3c6-e53d999c15e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-35-b1f0dfab6f4c>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  RF_reg.fit(x,y)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(RF_reg.predict([[1000]]))  #對 x 值為 1000 的情況進行預測"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pxeSjjZfITsH",
        "outputId": "4e20d6b0-989e-41e1-c0d7-7127bd8e1454"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[69.25359462]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_array = np.arange(min(x),max(x),0.01).reshape(-1,1)   #創建一個x_array，包含了在 x 的最小值和最大值之間以 0.01 間隔的數值。產生一個等間隔的 x 值序列。\n",
        "y_head = RF_reg.predict(x_array)      #生成一個與 x_array 相對應的預測目標變數值\n",
        "\n",
        "plt.scatter(x,y, color=\"red\")\n",
        "plt.plot(x_array,y_head,color=\"blue\")\n",
        "plt.xlabel(\"GDP\")\n",
        "plt.ylabel(\"percentage expenditure\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "Dn9HjMVqIWU8",
        "outputId": "865d7859-7fc1-4b01-d0e5-9f42086e3fa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "比較：\n",
        "\n",
        "Polynomial Regression：多決策樹，時間久，組合了多個決策樹可以減小過擬合的風險\n",
        "\n",
        "Decision Tree Regression：單一決策樹，時間快，處理複雜數據時容易過擬合。\n",
        "\n",
        "Random Forest Regression：次數不高，快，但次數過大容易過擬合"
      ],
      "metadata": {
        "id": "XQwULwN1XSmE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3."
      ],
      "metadata": {
        "id": "h5gC-UENZ8u-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "label encoding"
      ],
      "metadata": {
        "id": "vPssgtGKaQJ9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "labelencoder = LabelEncoder()\n",
        "\n",
        "df = data.copy()\n",
        "\n",
        "df['Country(en)'] = labelencoder.fit_transform(df['Country'])\n",
        "df[['Country', 'Country(en)']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "HlMCqzsPaAGJ",
        "outputId": "84afd0a1-0e4f-484d-ca64-4b2c51965955"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Country  Country(en)\n",
              "0     Afghanistan            0\n",
              "1     Afghanistan            0\n",
              "2     Afghanistan            0\n",
              "3     Afghanistan            0\n",
              "4     Afghanistan            0\n",
              "...           ...          ...\n",
              "2933     Zimbabwe          192\n",
              "2934     Zimbabwe          192\n",
              "2935     Zimbabwe          192\n",
              "2936     Zimbabwe          192\n",
              "2937     Zimbabwe          192\n",
              "\n",
              "[2938 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-54f14a97-87a3-4165-9141-9ad2b94a90f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Country(en)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2933</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2934</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2935</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2936</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2937</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2938 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54f14a97-87a3-4165-9141-9ad2b94a90f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-54f14a97-87a3-4165-9141-9ad2b94a90f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-54f14a97-87a3-4165-9141-9ad2b94a90f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c0684589-90ee-49ac-8ab6-d34a90de3edc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c0684589-90ee-49ac-8ab6-d34a90de3edc')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c0684589-90ee-49ac-8ab6-d34a90de3edc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "one hot encoding\n"
      ],
      "metadata": {
        "id": "7mKOPzURbgNj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = data.copy()\n",
        "data_dum = pd.get_dummies(df)\n",
        "data_dum[['Status_Developed',\t'Status_Developing']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "LwitvdfzbiHT",
        "outputId": "895bb20e-a1e9-45a6-ff97-43d10aadb6d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Status_Developed  Status_Developing\n",
              "0                    0                  1\n",
              "1                    0                  1\n",
              "2                    0                  1\n",
              "3                    0                  1\n",
              "4                    0                  1\n",
              "...                ...                ...\n",
              "2933                 0                  1\n",
              "2934                 0                  1\n",
              "2935                 0                  1\n",
              "2936                 0                  1\n",
              "2937                 0                  1\n",
              "\n",
              "[2938 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac62924f-21ef-4135-869b-db922ddcc987\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Status_Developed</th>\n",
              "      <th>Status_Developing</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2933</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2934</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2935</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2936</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2937</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2938 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac62924f-21ef-4135-869b-db922ddcc987')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac62924f-21ef-4135-869b-db922ddcc987 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac62924f-21ef-4135-869b-db922ddcc987');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-84dc6fbe-debe-4d34-9020-ed0ff843feeb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-84dc6fbe-debe-4d34-9020-ed0ff843feeb')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-84dc6fbe-debe-4d34-9020-ed0ff843feeb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Frequency Encoding"
      ],
      "metadata": {
        "id": "gDQ7dsmrcBEJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = data.copy()\n",
        "\n",
        "cate_cols = ['Country', 'Status']\n",
        "sampple_nums = df.shape[0]"
      ],
      "metadata": {
        "id": "h4FkgywsdWT2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 直接用次數\n",
        "for col in cate_cols:\n",
        "     freq_encode_dt = df[col].value_counts().to_dict()\n",
        "     df[f\"{col}(en)\"] = df[col].apply(lambda x: freq_encode_dt[x])\n",
        "\n",
        "df[['Country','Status','Country(en)','Status(en)']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "4S9DhUzedoXZ",
        "outputId": "7a6b8cca-7df5-4f27-93ce-a3be1affc4b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Country      Status  Country(en)  Status(en)\n",
              "0     Afghanistan  Developing           16        2426\n",
              "1     Afghanistan  Developing           16        2426\n",
              "2     Afghanistan  Developing           16        2426\n",
              "3     Afghanistan  Developing           16        2426\n",
              "4     Afghanistan  Developing           16        2426\n",
              "...           ...         ...          ...         ...\n",
              "2933     Zimbabwe  Developing           16        2426\n",
              "2934     Zimbabwe  Developing           16        2426\n",
              "2935     Zimbabwe  Developing           16        2426\n",
              "2936     Zimbabwe  Developing           16        2426\n",
              "2937     Zimbabwe  Developing           16        2426\n",
              "\n",
              "[2938 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a88c16b4-9c6e-4ae6-ac9d-04c307ae8a17\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Status</th>\n",
              "      <th>Country(en)</th>\n",
              "      <th>Status(en)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2933</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2934</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2935</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2936</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2937</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>16</td>\n",
              "      <td>2426</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2938 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a88c16b4-9c6e-4ae6-ac9d-04c307ae8a17')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a88c16b4-9c6e-4ae6-ac9d-04c307ae8a17 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a88c16b4-9c6e-4ae6-ac9d-04c307ae8a17');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ef4af2a8-293c-4e86-8cb5-c759ff4957bb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef4af2a8-293c-4e86-8cb5-c759ff4957bb')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ef4af2a8-293c-4e86-8cb5-c759ff4957bb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 將次數轉換成比例\n",
        "for col in cate_cols:\n",
        "     freq_encode_dt = df[col].value_counts().to_dict()\n",
        "     df[f\"{col}(en)\"] = df[col].apply(lambda x: freq_encode_dt[x]/sampple_nums)\n",
        "\n",
        "df[['Country','Status','Country(en)','Status(en)']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "vKmM5WXedrUk",
        "outputId": "196c5080-5c7d-491d-bea1-4fd42cb14a82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Country      Status  Country(en)  Status(en)\n",
              "0     Afghanistan  Developing     0.005446    0.825732\n",
              "1     Afghanistan  Developing     0.005446    0.825732\n",
              "2     Afghanistan  Developing     0.005446    0.825732\n",
              "3     Afghanistan  Developing     0.005446    0.825732\n",
              "4     Afghanistan  Developing     0.005446    0.825732\n",
              "...           ...         ...          ...         ...\n",
              "2933     Zimbabwe  Developing     0.005446    0.825732\n",
              "2934     Zimbabwe  Developing     0.005446    0.825732\n",
              "2935     Zimbabwe  Developing     0.005446    0.825732\n",
              "2936     Zimbabwe  Developing     0.005446    0.825732\n",
              "2937     Zimbabwe  Developing     0.005446    0.825732\n",
              "\n",
              "[2938 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2648ec27-d2fd-46ef-b2ba-5f48a7894e69\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Status</th>\n",
              "      <th>Country(en)</th>\n",
              "      <th>Status(en)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2933</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2934</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2935</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2936</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2937</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Developing</td>\n",
              "      <td>0.005446</td>\n",
              "      <td>0.825732</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2938 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2648ec27-d2fd-46ef-b2ba-5f48a7894e69')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2648ec27-d2fd-46ef-b2ba-5f48a7894e69 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2648ec27-d2fd-46ef-b2ba-5f48a7894e69');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-58155e61-968e-45a8-a9f8-8484477f69d8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58155e61-968e-45a8-a9f8-8484477f69d8')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-58155e61-968e-45a8-a9f8-8484477f69d8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "比較：\n",
        "\n",
        "label encoding:簡單，但可能產生不必要的數字關係\n",
        "\n",
        "one hot encoding:可能導致維度過高（這個就是）\n",
        "\n",
        "Frequency Encoding:不適用於具有相同頻率的類別（這個也是，資料頻率都一樣）\n",
        "\n"
      ],
      "metadata": {
        "id": "hn8TKGWWeO8q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "參考資料：https://www.kaggle.com/code/mathchi/life-expectancy-who-with-several-ml-techniques\n",
        "、助教的範例程式碼"
      ],
      "metadata": {
        "id": "gdt-6O7ZfMKu"
      }
    }
  ]
}